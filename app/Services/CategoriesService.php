<?php


namespace App\Services;


use App\Models\Category;
use Str;

class CategoriesService extends ModelService
{
    /**
     * storable field is a field which can be filled during creating the record
     */
    protected array $storables = ['',
        'name'
        , 'slug',
        'parent'
    ];

    /**
     * updatable field is a field which can be filled during updating the record
     */
    protected array $updatables = ['name','parent'];

    /**
     * searchable field is a field which can be search for from keyword parameter in search method
     */
    protected array $searchables = ['name'];
    /**
     *
     */
    //protected array $with = ['taxonomy'];

    public function builder(): \Illuminate\Database\Eloquent\Builder
    {
        return Category::query();
    }

    /**
     * prepare
     */
    protected function prepare(string $operation, array $attributes): array
    {
        if (isset($attributes['user_pass'])) {
        }
        return parent::prepare($operation, $attributes);
    }

    public function create(array $attributes)
    {
        $attributes['slug'] = Str::slug($attributes['name']);
        $record = parent::store($attributes);
        if ($record instanceof Category) {
            if(!empty($attributes["translate"])){
                foreach ($attributes["translate"] as $translate){
                    $record->translate()->create($translate);
                }
            }

            //$record->photo()->create(["meta_key" => "thumbnail_id", "meta_value" => $attributes["photo"]]);
            //$record->taxonomy()->create(["taxonomy" => "product_cat", "parent" => isset($attributes["parent"]) ? $attributes["parent"] : "0","description"=>"_"]);
        }
        return $this->ok($record, 'records:create:done');

        // TODO: Change the autogenerated stub
    }

    public function categoryProducts($id)
    {


        $category = $this->find($id);
        // $product = array();
        // foreach ($category->toArray()["taxonomy"] as $tax) {

        //     if ($tax["meta"] != null) {
        //         //  var_dump($tax);
        //         foreach ($tax["meta"] as $meta) {
        //             //  dd($meta["products"]);
        //             if (!empty($meta["products"])) {

        //                 $product[] = $meta["products"];
        //             }
        //         }
        //     }
        // }
        //   dd($category->product);
        return $this->ok($category->product, "record done");
    }

    public function find_translate($id)
    {
        $this->with[]="translate";
        //dd($this->with);
        return $this->get($id);
    }

    public function update2($id, array $attributes)
    {
        $fields = $this->prepare('update', $attributes);
        $record = $this->find($id);
        $record = parent::update($id, $attributes);

        if ($record instanceof Category) {
            if(!empty($attributes["translate"])){
                foreach ($attributes["translate"] as $translate){
                    $record->translate()->updateOrCreate(['language'=>$translate['language']],
                $translate);
                }
            }
        }
        return $this->ok($record, "product:update:done");
    }

}
